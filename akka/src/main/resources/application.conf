akka {
  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["com.pubgame.alphakigo.util.logging.AkkaLogger"]

  # Filter of log events that is used by the LoggingAdapter before
  # publishing log events to the eventStream. It can perform
  # fine grained filtering based on the log source. The default
  # implementation filters on the `loglevel`.
  # FQCN of the LoggingFilter. The Class of the FQCN must implement
  # akka.event.LoggingFilter and have a public constructor with
  # (akka.actor.ActorSystem.Settings, akka.event.EventStream) parameters.
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "DEBUG"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "DEBUG"

  # Log at info level when messages are sent to dead letters.
  # Possible values:
  # on: all dead letters are logged
  # off: no logging of dead letters
  # n: positive integer, number of dead letters that will be logged
  log-dead-letters = on
  log-dead-letters-during-shutdown = off

  actor {
    # FQCN of the ActorRefProvider to be used; the below is the built-in default,
    # another one is akka.remote.RemoteActorRefProvider in the akka-remote bundle.
    provider = "akka.actor.LocalActorRefProvider"
    #provider = "akka.remote.RemoteActorRefProvider"
    #provider = "akka.cluster.ClusterActorRefProvider"

    debug {
      # enable function of Actor.loggable(), which is to log any received message
      # at DEBUG level, see the “Testing Actor Systems” section of the Akka
      # Documentation at http://akka.io/docs
      receive = on

      # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill et.c.)
      autoreceive = on

      # enable DEBUG logging of actor lifecycle changes
      lifecycle = on

      # enable DEBUG logging of all LoggingFSMs for events, transitions and timers
      fsm = on

      # enable DEBUG logging of subscription changes on the eventStream
      event-stream = on

      # enable DEBUG logging of unhandled messages
      unhandled = on

      # enable WARN logging of misconfigured routers
      router-misconfiguration = on
    }
    default-dispatcher {
      type = "Dispatcher"
      executor = "fork-join-executor"
      fork-join-executor {
        parallelism-min = 128
        parallelism-factor = 5.0
        parallelism-max = 256
      }
    }
  }

  http {
    client {
      user-agent-header = Pubgame/1.0
    }

    server{
      idle-timeout = 0 s
    }
    host-connection-pool {
      max-connections = 128
      max-open-requests = 128
      max-retries = 5
      pipelining-limit = 1

      client {
        user-agent-header = Pubgame/1.0
      }
    }
  }
}

dispatcher {

  account {
    type = "Dispatcher"
    executor = "fork-join-executor"
    thread-pool-executor {
      keep-alive-time = 5s
      fixed-pool-size = off

      core-pool-size-min = 1
      core-pool-size-factor = 3.0
      core-pool-size-max = 128

      max-pool-size-min = 128
      max-pool-size-factor = 5.0
      max-pool-size-max = 512

      task-queue-size = -1
      task-queue-type = "linked"
      allow-core-timeout = on
    }
  }

  http {
    type = "Dispatcher"
    executor = "fork-join-executor"
    fork-join-executor {
      parallelism-min = 128
      parallelism-factor = 2
      parallelism-max = 256
    }
  }

  insight {
    type = "Dispatcher"
    executor = "fork-join-executor"
    fork-join-executor {
      parallelism-min = 32
      parallelism-factor = 2
      parallelism-max = 64
    }
  }
}
facebook {
  endpoint = graph.facebook.com
  version = 2.7
  token = 
}


db_pg_source = 
db_gd_source = 
#db_target=
db_target =
#db_target = 

logger.scala.slick = INFO
logger.scala.slick.session = INFO
